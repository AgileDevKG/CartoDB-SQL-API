#!/usr/bin/env node

// Command line tool for CartoDB SQL API
//
// https://github.com/Vizzuality/CartoDB-SQL-API
//

var http = require('http');

var nodevers = process.versions.node.split('.');

// NOTE: readline is also available in 0.4 but doesn't work
var hasReadline = parseInt(nodevers[0]) > 0 || parseInt(nodevers[1]) >= 8;
//console.log('Node version ' + nodevers.join(',') + ( hasReadline ? ' has' : ' does not have' ) + ' readline support');

var readline = hasReadline ? require('readline') : null;

var me = process.argv[1];

function usage(exit_code) {
  console.log("Usage: " + me + " [OPTIONS] <query>");
  if ( hasReadline ) {
    console.log("       " + me + " [OPTIONS]");
  }
  console.log("Options:");
  console.log(" -v                      verbose operations (off)");
  console.log(" --help                  print this help");
  console.log(" --user <string>         cartodb username (none)");
  console.log(" --domain <string>       service domain (localhost)");
  console.log(" --port <num>            service tcp port number (8080)");
  console.log(" --api-version <num>     API version (1)");
  console.log(" --key <string>          API authentication key (none)");
  console.log(" --format <string>       Response format (json)");
  console.log(" --dp <num>              Decimal places in geojson format (unspecified)");
  process.exit(exit_code);
}

process.argv.shift(); // this will be "node" (argv[0])
process.argv.shift(); // this will be "benchmark.js" (argv[1])

var format = 'json';
var username;
var domain = 'localhost';
var port = 8080;
var api_version = 1;
var api_key;
var sql;
var decimal_places;

var arg;
while ( arg = process.argv.shift() ) {
  if ( arg == '-v' ) {
    ++verbose;
  }
  else if ( arg == '--help' ) {
    usage(0);
  }
  else if ( arg == '--key' ) {
    api_key = process.argv.shift();
  }
  else if ( arg == '--domain' ) {
    domain = process.argv.shift();
  }
  else if ( arg == '--user' ) {
    username = process.argv.shift();
  }
  else if ( arg == '--port' ) {
    port = process.argv.shift();
  }
  else if ( arg == '--api-version' ) {
    api_version = process.argv.shift();
  }
  else if ( arg == '--format' ) {
    format = process.argv.shift();
  }
  else if ( arg == '--dp' ) {
    decimal_places = process.argv.shift();
  }
  else if ( ! sql ) {
    sql = arg;
  }
  else {
    usage(1);
  }
}

var hostname = username + '.' + domain;

if ( ! sql ) {
  if ( readline ) {
    var rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    rl.on('line', function(sql) {
      // TODO: some sanity checking, like trim the line ?
      if ( sql ) processQuery(sql);
    });
  } else {
    usage(1);
  }
} else {
  processQuery(sql);
}

// -- Perform the request

function processQuery(sql)
{
  var opt = {
    host: hostname,
    port: port,
    path: '/api/v' + api_version + '/sql?q=' + encodeURIComponent(sql) + '&format=' + encodeURIComponent(format)
  };

  if ( typeof(decimal_places) != 'undefined' ) opt.path += '&dp=' + decimal_places;

  console.log("Requests:", 'http://' + opt.host + ':' + opt.port + opt.path);

  var body = '';

  http.get(opt, function(res) {
    console.log("Response status: " + res.statusCode);
    res.on('data', function(chunk) {
      body += chunk;
      //console.log("data: "); console.dir(json);
    });

    res.on('end', function() {
      console.log('Body:');
      console.dir(body);
    });
  }).on('error', function(e) {
    console.log("ERROR: " + e.message);
  });

}
